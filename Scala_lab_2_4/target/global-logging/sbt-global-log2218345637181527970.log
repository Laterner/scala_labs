[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Jean\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Jean\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17.0.1)
[debug]       Load.loadUnit: plugins took 137.2927ms
[debug]       Load.loadUnit: defsScala took 0.376099ms
[debug] [Loading] Scanning directory C:\Users\Jean\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Jean\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 21.6538 ms
[debug]           Load.resolveProject(global-plugins) took 50.3375ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Jean\.sbt\1.0\plugins, plugins: List(<none>))) took 101.946399ms
[debug] [Loading] Done in C:\Users\Jean\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 131.744499ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.258699ms
[debug]     Load.loadUnit(file:/C:/Users/Jean/.sbt/1.0/plugins/, ...) took 283.657901ms
[debug]   Load.apply: load took 482.367799ms
[debug]   Load.apply: resolveProjects took 7.6806ms
[debug]   Load.apply: finalTransforms took 90.225601ms
[debug]   Load.apply: config.delegates took 11.9079ms
[debug]   Load.apply: Def.make(settings)... took 489.567299ms
[debug]   Load.apply: structureIndex took 136.0754ms
[debug]   Load.apply: mkStreams took 1.793701ms
[info] loading global plugins from C:\Users\Jean\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5969.9815ms
[debug]           Load.loadUnit: plugins took 30.413ms
[debug]           Load.loadUnit: defsScala took 0.003701ms
[debug] [Loading] Scanning directory C:\Users\Jean\Documents\GitHub\scala_labs\Scala_lab_1\project
[debug]             Load.loadUnit: mkEval took 7.109801ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Jean\Documents\GitHub\scala_labs\Scala_lab_1\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.9599 ms
[info] loading settings for project scala_lab_1-build from idea.sbt ...
[debug]               Load.resolveProject(scala_lab_1-build) took 4.137199ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala_lab_1-build, base: C:\Users\Jean\Documents\GitHub\scala_labs\Scala_lab_1\project, plugins: List(<none>))) took 6.799199ms
[debug] [Loading] Done in C:\Users\Jean\Documents\GitHub\scala_labs\Scala_lab_1\project, returning: (scala_lab_1-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3085.735499ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.2289ms
[debug]         Load.loadUnit(file:/C:/Users/Jean/Documents/GitHub/scala_labs/Scala_lab_1/project/, ...) took 3124.748601ms
[debug]       Load.apply: load took 3126.8383ms
[debug]       Load.apply: resolveProjects took 0.1886ms
[debug]       Load.apply: finalTransforms took 15.0522ms
[debug]       Load.apply: config.delegates took 0.455099ms
[debug]       Load.apply: Def.make(settings)... took 81.126099ms
[debug]       Load.apply: structureIndex took 58.307201ms
[debug]       Load.apply: mkStreams took 0.003701ms
[info] loading project definition from C:\Users\Jean\Documents\GitHub\scala_labs\Scala_lab_1\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4642.6269ms
[debug]     Load.loadUnit: defsScala took 0.005601ms
[debug] [Loading] Scanning directory C:\Users\Jean\Documents\GitHub\scala_labs\Scala_lab_1
[debug]       Load.loadUnit: mkEval took 0.362799ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.098001 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 63.330701ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Jean\Documents\GitHub\scala_labs\Scala_lab_1, plugins: List(<none>))) took 69.0224ms
[debug] [Loading] Done in C:\Users\Jean\Documents\GitHub\scala_labs\Scala_lab_1, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1614.6248ms
[debug]     Load.loadUnit: cleanEvalClasses took 22.6457ms
[debug]   Load.loadUnit(file:/C:/Users/Jean/Documents/GitHub/scala_labs/Scala_lab_1/, ...) took 6281.1266ms
[debug] Load.apply: load took 6283.2308ms
[debug] Load.apply: resolveProjects took 0.461801ms
[debug] Load.apply: finalTransforms took 67.211499ms
[debug] Load.apply: config.delegates took 0.4844ms
[debug] Load.apply: Def.make(settings)... took 91.118199ms
[debug] Load.apply: structureIndex took 31.572701ms
[debug] Load.apply: mkStreams took 0.002701ms
[info] set current project to Scala_lab_1 (in build file:/C:/Users/Jean/Documents/GitHub/scala_labs/Scala_lab_1/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58067 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58067, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Scala_lab_1 (in build file:/C:/Users/Jean/Documents/GitHub/scala_labs/Scala_lab_1/)
[debug] > Exec(idea-shell, None, None)
